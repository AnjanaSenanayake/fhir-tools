// Copyright (c) ${licenseYear}, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

#foreach($import in $imports)
#if($import)
import $import;
#end
#end

#foreach ($mapEntry in $datatypeContext.entrySet())
@r4:DataTypeDefinition {
    name: "${mapEntry.value.annotation.name}",
    baseType: (),
    elements: {
    #foreach ($elementMapEntry in ${mapEntry.value.annotation.elements.entrySet()})
#if($elementMapEntry)

        "${elementMapEntry.value.name}": {
            name: "${elementMapEntry.value.name}",
            dataType: ${elementMapEntry.value.getDataTypeWithImportPrefix()},
            min: ${elementMapEntry.value.min},
            max: ${elementMapEntry.value.max},
            isArray: ${elementMapEntry.value.isArray()},
            description: "${elementMapEntry.value.description}",
            path: "${elementMapEntry.value.path}"
        }#if($velocityCount != $mapEntry.value.annotation.elements.entrySet().size()),#end
#end
    #end
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type ${mapEntry.value.name} record {|

    *r4:${mapEntry.value.baseDataType};
    //Inherited child element from "Element" (Redefining to maintain order when serialize) (START)
    string id?;
    r4:Extension[] extension?;
    //Inherited child element from "Element" (Redefining to maintain order when serialize) (END)
    #foreach ($elementMapEntry in ${mapEntry.value.elements.entrySet()})
#if($elementMapEntry)
${elementMapEntry.value.getTypeWithImportPrefix()}#if($elementMapEntry.value.isArray())[]#end ${elementMapEntry.value.name}#if(!$elementMapEntry.value.isRequired())?#end;
#end
    #end

|};

#foreach ($elementMapEntry in ${mapEntry.value.extendedElements.entrySet()})
#if($elementMapEntry.value.getBalDataType().getType() == 'enum')
public enum $elementMapEntry.value.typeName {
    #foreach ($childElementMapEntry in ${elementMapEntry.value.elements.entrySet()})
        CODE_${elementMapEntry.value.typeName.toUpperCase()}_${childElementMapEntry.key.toUpperCase()} = "$childElementMapEntry.key"#if($velocityCount != $elementMapEntry.value.elements.entrySet().size()),#end

    #end

};

#end
#end

#end
